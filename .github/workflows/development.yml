name: Development

on:
    workflow_dispatch:
        inputs:
            php:
                description: 'PHP version'
                required: true
                default: '8.0'
                type: choice
                options:
                    - '8.0'
                    - '8.1'

            mysql:
                description: 'MySQL version'
                required: true
                default: '5.7.37'
                type: choice
                options:
                    - '5.7.37'
                    - '8.0'

            module_codecept_test_group:
                description: 'Module codeception test group'
                required: true
                default: 'all'
                type: choice
                options:
                    - 'all'
                    - 'address'
                    - 'basket'
                    - 'customer'
                    - 'order'
                    - 'other'

            edition:
                description: 'Shop edition'
                required: true
                default: 'ce'
                type: choice
                options:
                    - 'ce'
                    - 'pe'
                    - 'ee'


env:
    PACKAGE_NAME: 'oxid-esales/graphql-storefront'
    MODULE_IDS: 'oe_graphql_storefront'
    SONARCLOUD_ORGANIZATION: 'oxid-esales'
    SONARCLOUD_PROJECT_KEY: 'OXID-eSales_storefront-module'

jobs:
    prepare_environment:
        runs-on: ubuntu-latest
        outputs:
            PHP_VERSION: ${{ steps.php_version.outputs.PHP_VERSION }}
            MYSQL_VERSION: ${{ steps.mysql_version.outputs.MYSQL_VERSION }}
            MODULE_CODECEPT_TEST_GROUP: ${{ steps.module_codecept_test_group.outputs.MODULE_CODECEPT_TEST_GROUP }}
            SHOP_EDITION: ${{ steps.edition.outputs.SHOP_EDITION }}
            CODECEPTION_MATRIX: ${{ steps.codeception_matrix.outputs.CODECEPTION_MATRIX }}
        steps:
            - id: php_version
              run: |
                  echo -n "PHP_VERSION=${{ inputs.php }}" >> $GITHUB_OUTPUT
            - id: mysql_version
              run: |
                  echo -n "MYSQL_VERSION=${{ inputs.mysql }}" >> $GITHUB_OUTPUT
            - id: module_codecept_test_group
              run: |
                  echo -n "MODULE_CODECEPT_TEST_GROUP=${{ inputs.module_codecept_test_group }}" >> $GITHUB_OUTPUT
            - id: edition
              run: |
                  echo -n "SHOP_EDITION=${{ inputs.edition }}" >> $GITHUB_OUTPUT
            - id: codeception_matrix
              name: Create codeception matrix
              run: |
                  if [[ ${{ inputs.module_codecept_test_group }} -eq "all" ]]; then
                    echo -n "CODECEPTION_MATRIX=[\"address\", \"basket\", \"customer\", \"order\", \"other\"]" >> $GITHUB_OUTPUT
                  else
                    echo -n "CODECEPTION_MATRIX=${{ inputs.module_codecept_test_group }}" >> $GITHUB_OUTPUT
                  fi


    install_shop_with_module:
        needs: [ prepare_environment ]
        runs-on: ubuntu-latest
        steps:
            -   name: Cleanup workspace
                run: |
                    ls -la ./
                    rm -rf ./* || true
                    rm -rf ./.??* || true
                    ls -la ./

            -   name: Cleanup Docker
                run: |
                    c=$(docker ps -q) && [[ $c ]] && docker kill $c
                    docker system prune --force

            - name: print test parameters
              run: |
                  echo "Running job with PHP version ${{ needs.prepare_environment.outputs.PHP_VERSION}}"
                  echo "Running job with MySQL version ${{ needs.prepare_environment.outputs.MYSQL_VERSION }}"
                  echo "Running job with module codeception test group ${{ needs.prepare_environment.outputs.MODULE_CODECEPT_TEST_GROUP }}"
                  echo "Running job with shop edition ${{ needs.prepare_environment.outputs.SHOP_EDITION }}"
                  echo "Running job with codeception matrix ${{ needs.prepare_environment.outputs.CODECEPTION_MATRIX }}"
                  echo ${{ github.event_name }}

            - name: context php_version
              run: |
                  echo -n "PHP_VERSION=${{ needs.prepare_environment.outputs.PHP_VERSION }}" >> $GITHUB_ENV

            - name: context mysql_version
              run: |
                  echo -n "MYSQL_VERSION=${{ needs.prepare_environment.outputs.MYSQL_VERSION }}" >> $GITHUB_ENV

            - name: context shop_edition
              run: |
                  echo -n "SHOP_EDITION=${{ needs.prepare_environment.outputs.SHOP_EDITION }}" >> $GITHUB_ENV

            - name: Clone testing environment
              run: git clone https://github.com/OXID-eSales/docker-eshop-sdk.git .

            - name: Clone the shop
              run: git clone --depth 1 https://github.com/OXID-eSales/oxideshop_ce.git --branch b-7.0.x --single-branch source

            - name: Cache current installation
              uses: actions/cache@v3
              with:
                  path: |
                      ./*
                  key: shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  restore-keys: |
                      shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}

            - name: Prepare container configuration
              run: |
                  make setup
                  make addbasicservices

                  perl -pi\
                    -e 's#PHP_VERSION=.*#PHP_VERSION=${{ env.PHP_VERSION }}#g;'\
                    -e "s#MYSQL_VERSION=.*#MYSQL_VERSION='${{ env.MYSQL_VERSION }}'#g;"\
                    .env

                  perl -pi\
                    -e 's#display_errors =.*#display_errors = false#g;'\
                    -e 'print "xdebug.max_nesting_level=1000\nxdebug.mode=coverage\n\n";'\
                    -e 'print "error_reporting = E_ALL & ~E_DEPRECATED & ~E_NOTICE & ~E_WARNING\n"'\
                    containers/php/custom.ini

                  perl -pi\
                    -e 's#/var/www/#/var/www/source/#g;'\
                    containers/httpd/project.conf

            - name: Prepare shop configuration
              run: |
                  cp source/source/config.inc.php.dist source/source/config.inc.php
                  sed -i "1s+^+SetEnvIf Authorization "\(.*\)" HTTP_AUTHORIZATION=\$1\n\n+" source/source/.htaccess
                  sed -i -e 's/<dbHost>/mysql/'\
                         -e 's/<dbUser>/root/'\
                         -e 's/<dbName>/example/'\
                         -e 's/<dbPwd>/root/'\
                         -e 's/<dbPort>/3306/'\
                         -e 's/<sShopURL>/http:\/\/localhost.local\//'\
                         -e 's/<sShopDir>/\/var\/www\/source\//'\
                         -e 's/<sCompileDir>/\/var\/www\/source\/tmp\//'\
                      source/source/config.inc.php

            - name: Set Github dependencies
              if: ((needs.prepare_environment.outputs.SHOP_EDITION == 'pe') || (needs.prepare_environment.outputs.SHOP_EDITION == 'ee'))
              run: |
                  docker-compose run -T --rm php composer config github-protocols https
                  docker-compose run -T --rm php composer config -g github-oauth.github.com ${{ secrets.GH_CI_JENKINS_TOKEN }}

            - name: Set EE shop in composer config
              if: (needs.prepare_environment.outputs.SHOP_EDITION == 'ee')
              run: |
                  docker-compose run -T --rm php composer config repositories.oxid-esales/oxideshop-ee git https://github.com/OXID-eSales/oxideshop_ee.git

            - name: Install PE shop
              if: ((needs.prepare_environment.outputs.SHOP_EDITION == 'pe') || (needs.prepare_environment.outputs.SHOP_EDITION == 'ee'))
              run: |
                  docker-compose run -T --rm php composer config repositories.oxid-esales/oxideshop-pe git https://github.com/OXID-eSales/oxideshop_pe.git
                  docker-compose run -T --rm php composer require oxid-esales/oxideshop-pe:dev-b-7.0.x --no-update

            - name: Install EE shop
              if: (needs.prepare_environment.outputs.SHOP_EDITION == 'ee')
              run: |
                  docker-compose run -T --rm php composer require oxid-esales/oxideshop-ee:dev-b-7.0.x --no-update --no-plugins --no-scripts

            - name: Start containers
              run: |
                  make up
                  sleep 2

            - name: Checkout current module
              uses: actions/checkout@v2
              with:
                  path: source/test-module

            - name: Install module
              run: |
                  docker-compose exec -T \
                    php composer config repositories.${{ env.PACKAGE_NAME }} \
                    --json '{"type":"path", "url":"./test-module", "options": {"symlink": true}}'
                  docker-compose exec -T \
                    php composer require ${{ env.PACKAGE_NAME }}:* --no-interaction --no-update

            - name: Install dependencies and reset shop
              run: |
                  docker-compose exec -T php composer update --no-interaction
                  docker-compose exec -T \
                    php bin/oe-console oe:database:reset --db-host=mysql --db-port=3306 \
                    --db-name=example --db-user=root --db-password=root --force

            - name: Stop containers
              run: |
                  docker-compose down
                  sleep 2

            - name: Cleanup Docker
              run: |
                  c=$(docker ps -q) && [[ $c ]] && docker kill $c
                  docker system prune --force

    unit_tests:
        needs: [ prepare_environment, install_shop_with_module ]
        runs-on: ubuntu-latest
        steps:
            - name: context php_version
              run: |
                  echo -n "PHP_VERSION=${{ needs.prepare_environment.outputs.PHP_VERSION }}" >> $GITHUB_ENV

            - name: context mysql_version
              run: |
                  echo -n "MYSQL_VERSION=${{ needs.prepare_environment.outputs.MYSQL_VERSION }}" >> $GITHUB_ENV

            - name: context shop_edition
              run: |
                  echo -n "SHOP_EDITION=${{ needs.prepare_environment.outputs.SHOP_EDITION }}" >> $GITHUB_ENV

            - name: Load current installation from cache
              uses: actions/cache@v3
              with:
                  path: |
                      ./*
                  key: shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  restore-keys: |
                      shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}

            - name: Start containers
              run: |
                  make up
                  sleep 2

            - name: Activate module
              run: |
                  docker-compose exec -T php bin/oe-console oe:module:activate oe_graphql_base
                  docker-compose exec -T php bin/oe-console oe:module:activate oe_graphql_storefront

            - name: Run tests
              run: |
                  docker-compose exec -T \
                    -e XDEBUG_MODE=coverage \
                    php php vendor/bin/phpunit \
                      -c /var/www/vendor/${{ env.PACKAGE_NAME }}/tests/phpunit.xml \
                      --coverage-php=/var/www/unit.cov
                      --coverage-clover=/var/www/coverage.xml \
                      --coverage-text

            - name: Upload log artifact
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: UnitTestsLog-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  path: |
                      source/unit.cov
                      source/source/log/oxideshop.log
                      data/php/logs/error_log.txt

            - name: Stop containers
              if: always()
              run: |
                  docker-compose down
                  sleep 2

            - name: Cleanup Docker
              run: |
                  c=$(docker ps -q) && [[ $c ]] && docker kill $c
                  docker system prune --force

    integration_tests_module:
        needs: [ prepare_environment, install_shop_with_module ]
        runs-on: ubuntu-latest
        steps:
            - name: context php_version
              run: |
                  echo -n "PHP_VERSION=${{ needs.prepare_environment.outputs.PHP_VERSION}}" >> $GITHUB_ENV

            - name: context mysql_version
              run: |
                  echo -n "MYSQL_VERSION=${{ needs.prepare_environment.outputs.MYSQL_VERSION}}" >> $GITHUB_ENV

            - name: context shop_edition
              run: |
                  echo -n "SHOP_EDITION=${{ needs.prepare_environment.outputs.SHOP_EDITION }}" >> $GITHUB_ENV

            - name: Cleanup workspace
              run: |
                  ls -la ./
                  rm -rf ./* || true
                  sudo rm -rf ./.??* || true
                  ls -la ./

            - name: Load current installation from cache
              uses: actions/cache@v3
              with:
                  path: |
                      ./*
                  key: shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  restore-keys: |
                      shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}

            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_HUB_USER }}
                  password: ${{ secrets.DOCKER_HUB_TOKEN }}

            - name: Start containers
              run: |
                  make up
                  sleep 2

#            # --shop-ids raus bei CE
#            - name: Reset and prepare
#              run: |
#                  docker-compose exec -T php bin/oe-console oe:cache:clear
#                  docker-compose exec -T php bin/oe-console oe:database:reset --db-host=mysql --db-port=3306 \
#                             --db-name=example --db-user=root --db-password=root --force --shop-id=1
#                  docker-compose exec -T php bin/oe-console oe:setup:demodata --shop-id=1
#                  docker-compose exec -T \
#                    php bin/oe-console oe:license:add ${{ secrets.GH_EE_LICENSE }} --shop-id=1
#                  docker-compose exec -T php bin/oe-console oe:module:reset-configurations --shop-id=1
#                  docker-compose exec -T php bin/oe-console oe:module:install ./vendor/${{ env.PACKAGE_NAME }}/
#                  docker-compose exec -T php bin/oe-console oe:module:install-assets
#                  docker-compose exec -T php bin/oe-console oe:module:activate oenginx --shop-id=1

            - name: Run tests
              run: |
                  docker-compose exec -T \
                  -e XDEBUG_MODE=coverage \
                  php php vendor/bin/phpunit \
                   --bootstrap=/var/www/source/bootstrap.php \
                   -c /var/www/vendor/${{ env.PACKAGE_NAME }}/tests/phpunitintegration.xml \
                   --coverage-php=/var/www/integration.cov

            - name: Upload log artifact
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: IntegrationTestsLog-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  path: |
                      source/integration.cov
                      source/source/log/oxideshop.log
                      data/php/logs/error_log.txt

            - name: Stop containers
              if: always()
              run: |
                  docker-compose down
                  sleep 2
            - name: Cleanup Docker
              run: |
                  c=$(docker ps -q) && [[ $c ]] && docker kill $c
                  docker system prune --force

    codeception_tests:
        needs: [ prepare_environment, install_shop_with_module ]
        strategy:
            fail-fast: false
            matrix:
                group: ${{ fromJSON(needs.prepare_environment.outputs.CODECEPTION_MATRIX) }}
        runs-on: ubuntu-latest
        steps:
            - name: Cleanup workspace
              run: |
                  ls -la ./
                  rm -rf ./* || true
                  rm -rf ./.??* || true
                  ls -la ./
            - name: Cleanup Docker
              run: |
                  c=$(docker ps -q) && [[ $c ]] && docker kill $c
                  docker system prune --force

            - name: context php_version
              run: |
                  echo -n "PHP_VERSION=${{ needs.prepare_environment.outputs.PHP_VERSION }}" >> $GITHUB_ENV
            - name: context mysql_version
              run: |
                  echo -n "MYSQL_VERSION=${{ needs.prepare_environment.outputs.MYSQL_VERSION }}" >> $GITHUB_ENV
            - name: context shop_edition
              run: |
                  echo -n "SHOP_EDITION=${{ needs.prepare_environment.outputs.SHOP_EDITION }}" >> $GITHUB_ENV

            - name: Load current installation from cache
              uses: actions/cache@v3
              with:
                  path: |
                      ./*
                  key: shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  restore-keys: |
                      shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}

            - name: Start containers
              run: |
                  make up
                  sleep 2

            - name: Install twig components
              run: |
                  docker-compose exec -T \
                    php composer require oxid-esales/flow-theme:dev-master --no-interaction --no-update
                  docker-compose exec -T \
                    php composer require oxid-esales/twig-component:dev-b-7.0.x --no-interaction --no-update
                  docker-compose exec -T \
                    php composer require oxid-esales/twig-theme:dev-b-7.0.x --no-interaction --no-update
                  docker-compose exec -T \
                    php composer require oxid-esales/twig-admin-theme:dev-b-7.0.x --no-interaction --no-update

            - name: Install codeception dependencies
              run: |
                  docker-compose exec -T \
                    php composer config repositories.oxid-esales/oxideshop-demodata-${{ env.SHOP_EDITION }} \
                    --json '{"type":"git", "url":"https://github.com/OXID-eSales/oxideshop_demodata_${{ env.SHOP_EDITION }}"}'
                  docker-compose exec -T php composer require oxid-esales/oxideshop-demodata-${{ env.SHOP_EDITION }}:dev-master --no-update
                  docker-compose exec -T php composer require codeception/c3 --dev --no-update
                  docker-compose exec -T php composer require codeception/module-rest:* --dev --no-update
                  docker-compose exec -T php composer require codeception/module-phpbrowser:* --dev --no-update
                  docker-compose exec -T php composer config --no-plugins allow-plugins.codeception/c3 true
                  docker-compose exec -T php composer update
                  sed -i 's/<?php/<?php\n\nrequire(__DIR__ . "\/..\/c3.php");/' source/source/bootstrap.php

            - name: Activate module
              run: |
                  docker-compose exec -T php bin/oe-console oe:setup:demodata
                  docker-compose exec -T php bin/oe-console oe:module:activate oe_graphql_base
                  docker-compose exec -T php bin/oe-console oe:module:activate oe_graphql_storefront

            - name: Run tests
              run: |
                  docker-compose exec -T \
                    -e SELENIUM_SERVER_HOST=selenium \
                    -e MODULE_IDS=${{ env.MODULE_IDS }} \
                    -e XDEBUG_MODE=coverage \
                    php php vendor/bin/codecept run acceptance \
                      -c /var/www/vendor/${{ env.PACKAGE_NAME }}/tests/codeception.yml -g ${{ matrix.group }} -vvv

            - name: Upload log artifact
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: CodeceptionTestsLog-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  path: |
                      docker-compose.yml
                      source/composer.json
                      source/composer.lock
                      source/source/config.inc.php
                      source/source/log/oxideshop.log
                      data/php/logs/error_log.txt
                      source/tests/Codeception/_output

            - name: Stop containers
              if: always()
              run: |
                  docker-compose down
                  sleep 2

            - name: Cleanup Docker
              run: |
                  c=$(docker ps -q) && [[ $c ]] && docker kill $c
                  docker system prune --force

    prepare_coverage_results:
        needs: [ prepare_environment, unit_tests_module, integration_tests_module ]
        runs-on: self-hosted
        steps:
            - name: context php_version
              run: |
                  echo -n "PHP_VERSION=${{ needs.prepare_environment.outputs.PHP_VERSION }}" >> $GITHUB_ENV
            - name: context mysql_version
              run: |
                  echo -n "MYSQL_VERSION=${{ needs.prepare_environment.outputs.MYSQL_VERSION }}" >> $GITHUB_ENV
            - name: context shop_edition
              run: |
                  echo -n "SHOP_EDITION=${{ needs.prepare_environment.outputs.SHOP_EDITION }}" >> $GITHUB_ENV

            - name: Load current installation from cache
              uses: actions/cache@v3
              with:
                  path: |
                      ./*
                  key: shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  restore-keys: |
                      shopInstallation-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}

            - name: Download unit artifacts
              uses: actions/download-artifact@v3
              with:
                  name: UnitTestsLog-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  path: ./source/coverage/

            - name: Download integration artifacts
              uses: actions/download-artifact@v3
              with:
                  name: IntegrationTestsLog-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  path: ./source/coverage/

            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_HUB_USER }}
                  password: ${{ secrets.DOCKER_HUB_TOKEN }}

            - name: Start containers
              run: |
                  make up
                  sleep 2
            - name: Collect and merge coverage reports
              continue-on-error: true
              run: |
                  ls -alh source/coverage
                  wget https://phar.phpunit.de/phpcov-7.0.2.phar
                  mv phpcov-7.0.2.phar source/phpcov.phar
                  docker-compose run -T php php phpcov.phar merge --clover coverage.xml ./coverage
                  sed -i 's+/var/www/source/modules/oe/graphql-storefront/+./+' source/coverage.xml
            - name: Upload log artifact
              uses: actions/upload-artifact@v3
              with:
                  name: TestsLog-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  path: source/coverage.xml

    styles:
        needs: [ prepare_environment ]
        strategy:
            matrix:
                php: [ '8.0', '8.1' ]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout current module
              uses: actions/checkout@v2
              with:
                  path: source/test-module

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ needs.prepare_environment.outputs.PHP_VERSION }}
                  coverage: xdebug
                  extensions: gd, zip

            - name: Install module dependencies
              id: dependencies
              working-directory: source/test-module
              run: composer install

            - name: Run phpcs
              id: phpcs
              if: always()
              working-directory: source/test-module
              run: composer phpcs

            - name: Run phpstan
              id: phpstan
              if: always()
              working-directory: source/test-module
              run: composer phpstan-report || composer phpstan

            - name: Run phpmd
              id: phpmd
              continue-on-error: true
              if: always()
              working-directory: source/test-module
              run: composer phpmd-report || composer phpmd

            - name: Deptrac Analyzer
              id: deptrac
              if: always()
              working-directory: source/test-module
              run: composer deptrac

            - name: Upload log artifact
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: StylesLog-${{ env.PHP_VERSION }}-${{ github.sha }}
                  path: |
                      source/source/modules/oe/graphql-storefront/phpstan.report.json
                      source/source/modules/oe/graphql-storefront/phpmd.report.json

    sonarcloud:
        needs: [ prepare_environment, styles, prepare_coverage_results ]
        if: always()
        runs-on: self-hosted
        steps:
            - name: context php_version
              run: |
                  echo -n "PHP_VERSION=${{ needs.prepare_environment.outputs.PHP_VERSION}}" >> $GITHUB_ENV
            - name: context mysql_version
              run: |
                  echo -n "MYSQL_VERSION=${{ needs.prepare_environment.outputs.MYSQL_VERSION}}" >> $GITHUB_ENV
            - name: context shop_edition
              run: |
                  echo -n "SHOP_EDITION=${{ needs.prepare_environment.outputs.SHOP_EDITION }}" >> $GITHUB_ENV

            - name: Checkout current module
              uses: actions/checkout@v3

            - name: Download TestsLog artifacts
              continue-on-error: true
              uses: actions/download-artifact@v3
              with:
                  name: TestsLog-${{ env.PHP_VERSION }}-${{ env.MYSQL_VERSION }}-${{ env.SHOP_EDITION }}-${{ github.sha }}
                  path: ./tests/

            - name: Download styles artifacts
              uses: actions/download-artifact@v3
              with:
                  name: StylesLog-${{ env.PHP_VERSION }}-${{ github.sha }}
                  path: ./styles/

# hier darf nicht nginx drin stehen
            - name: Fix paths in styles logs
              continue-on-error: true
              run: |
                  sed -i 's+\/home\/runner\/work\/.*?\/.*?\/source\/source\/modules\/oe\/graphql-storefront\/++' styles/phpstan.report.json
            - name: SonarCloud Scan
              uses: sonarsource/sonarcloud-github-action@master
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              with:
                  args: >
                      -Dsonar.organization=${{ env.SONARCLOUD_ORGANIZATION }}
                      -Dsonar.projectKey=${{ env.SONARCLOUD_PROJECT_KEY }}
                      -Dsonar.sources=src
                      -Dsonar.tests=tests
                      -Dsonar.sourceEncoding=UTF-8
                      -Dsonar.php.coverage.reportPaths=tests/coverage.xml
                      -Dsonar.php.phpstan.reportPaths=styles/phpstan.report.json
                      -Dsonar.cpd.php.minimumTokens=25
                      -Dsonar.cpd.php.minimumLines=5

    notify_slack:
        needs: [ styles, unit_tests, codeception_tests ]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Send custom JSON data to Slack workflow
              uses: slackapi/slack-github-action@v1.23.0
              with:
                  payload: >
                      { "text": "
                      ${{ github.event_name == 'workflow_dispatch' && 'Manual run of' || 'Scheduled run of' }} ${{ github.workflow }} on ${{ github.repository }} by ${{ github.actor }}
                      ${{ (needs.codeception_tests.result=='success' && needs.unit_tests.result=='success' && needs.styles.result=='success') && 'Successful' || 'Failed' }}
                      ", "blocks": [ { "type": "header","text": { "type": "plain_text", "emoji": true, "text": "
                      ${{ github.event_name == 'workflow_dispatch' && 'Manual run of' || 'Scheduled' }} ${{ github.workflow }} on ${{ github.repository }} by ${{ github.actor }}
                      " } },{ "type": "section","fields": [ { "type": "mrkdwn","text": "
                      *Status:* ${{ (needs.codeception_tests.result=='success' && needs.unit_tests.result=='success' && needs.styles.result=='success') && ':white_check_mark:' || ':x:' }}
                      " },{ "type": "mrkdwn","text": "
                      Repository: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.repository }}/actions/runs/${{ github.run_id }}>
                      " } ] },{ "type": "section", "text": { "type": "mrkdwn", "text": "
                      \n* Module Unit ${{ (needs.unit_tests.result=='success') && ':white_check_mark:' || ':x:' }}
                      \n* Module Codeception ${{ (needs.codeception_tests.result=='success') && ':white_check_mark:' || ':x:' }}
                      \n* Module Styles ${{ (needs.styles.result=='success') && ':white_check_mark:' || ':x:' }}
                      " } }, { "type": "divider" } ] }
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
